// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package trigger_spb

import (
	context "context"
	fmt "fmt"
	j5reflect "github.com/pentops/j5/lib/j5reflect"
	j5schema "github.com/pentops/j5/lib/j5schema"
	psm "github.com/pentops/j5/lib/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// State Query Service for %sTrigger
// QuerySet is the query set for the Trigger service.

type TriggerPSMQuerySet = psm.StateQuerySet

func NewTriggerPSMQuerySet(
	smSpec psm.QuerySpec,
	options psm.StateQueryOptions,
) (*TriggerPSMQuerySet, error) {
	return psm.BuildStateQuerySet(smSpec, options)
}

type TriggerPSMQuerySpec = psm.QuerySpec

func DefaultTriggerPSMQuerySpec(tableSpec psm.QueryTableSpec) TriggerPSMQuerySpec {
	return psm.QuerySpec{
		GetMethod: &j5schema.MethodSchema{
			Request:  j5schema.MustObjectSchema((&TriggerGetRequest{}).ProtoReflect().Descriptor()),
			Response: j5schema.MustObjectSchema((&TriggerGetResponse{}).ProtoReflect().Descriptor()),
		},
		ListMethod: &j5schema.MethodSchema{
			Request:  j5schema.MustObjectSchema((&TriggerListRequest{}).ProtoReflect().Descriptor()),
			Response: j5schema.MustObjectSchema((&TriggerListResponse{}).ProtoReflect().Descriptor()),
		},
		ListEventsMethod: &j5schema.MethodSchema{
			Request:  j5schema.MustObjectSchema((&TriggerEventsRequest{}).ProtoReflect().Descriptor()),
			Response: j5schema.MustObjectSchema((&TriggerEventsResponse{}).ProtoReflect().Descriptor()),
		},
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(reqReflect j5reflect.Object) (map[string]interface{}, error) {
			req, ok := reqReflect.Interface().(*TriggerListRequest)
			if !ok {
				return nil, fmt.Errorf("expected *TriggerListRequest but got %T", req)
			}
			filter := map[string]interface{}{}
			return filter, nil
		},
		ListEventsRequestFilter: func(reqReflect j5reflect.Object) (map[string]interface{}, error) {
			req, ok := reqReflect.Interface().(*TriggerEventsRequest)
			if !ok {
				return nil, fmt.Errorf("expected *TriggerEventsRequest but got %T", req)
			}
			filter := map[string]interface{}{}
			filter["trigger_id"] = req.TriggerId
			return filter, nil
		},
	}
}

type TriggerQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *TriggerPSMQuerySet
	UnsafeTriggerQueryServiceServer
}

var _ TriggerQueryServiceServer = &TriggerQueryServiceImpl{}

func NewTriggerQueryServiceImpl(db sqrlx.Transactor, querySet *TriggerPSMQuerySet) *TriggerQueryServiceImpl {
	return &TriggerQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *TriggerQueryServiceImpl) TriggerGet(ctx context.Context, req *TriggerGetRequest) (*TriggerGetResponse, error) {
	resObject := &TriggerGetResponse{}
	err := s.querySet.Get(ctx, s.db, req.J5Object(), resObject.J5Object())
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *TriggerQueryServiceImpl) TriggerList(ctx context.Context, req *TriggerListRequest) (*TriggerListResponse, error) {
	resObject := &TriggerListResponse{}
	err := s.querySet.List(ctx, s.db, req.J5Object(), resObject.J5Object())
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *TriggerQueryServiceImpl) TriggerEvents(ctx context.Context, req *TriggerEventsRequest) (*TriggerEventsResponse, error) {
	resObject := &TriggerEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req.J5Object(), resObject.J5Object())
	if err != nil {
		return nil, err
	}
	return resObject, nil
}
