// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package trigger_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
	j5reflect "github.com/pentops/j5/lib/j5reflect"
	proto "google.golang.org/protobuf/proto"
)

func (msg *TriggerKeys) Clone() any {
	return proto.Clone(msg).(*TriggerKeys)
}
func (msg *TriggerKeys) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerKeys) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *TriggerData) Clone() any {
	return proto.Clone(msg).(*TriggerData)
}
func (msg *TriggerData) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerData) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *TriggerState) Clone() any {
	return proto.Clone(msg).(*TriggerState)
}
func (msg *TriggerState) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerState) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// TriggerEventType is a oneof wrapper
type TriggerEventTypeKey string

const (
	TriggerEvent_Type_Created           TriggerEventTypeKey = "created"
	TriggerEvent_Type_Updated           TriggerEventTypeKey = "updated"
	TriggerEvent_Type_Paused            TriggerEventTypeKey = "paused"
	TriggerEvent_Type_Activated         TriggerEventTypeKey = "activated"
	TriggerEvent_Type_ManuallyTriggered TriggerEventTypeKey = "manuallyTriggered"
	TriggerEvent_Type_Triggered         TriggerEventTypeKey = "triggered"
	TriggerEvent_Type_Archived          TriggerEventTypeKey = "archived"
)

func (x *TriggerEventType) TypeKey() (TriggerEventTypeKey, bool) {
	switch x.Type.(type) {
	case *TriggerEventType_Created_:
		return TriggerEvent_Type_Created, true
	case *TriggerEventType_Updated_:
		return TriggerEvent_Type_Updated, true
	case *TriggerEventType_Paused_:
		return TriggerEvent_Type_Paused, true
	case *TriggerEventType_Activated_:
		return TriggerEvent_Type_Activated, true
	case *TriggerEventType_ManuallyTriggered_:
		return TriggerEvent_Type_ManuallyTriggered, true
	case *TriggerEventType_Triggered_:
		return TriggerEvent_Type_Triggered, true
	case *TriggerEventType_Archived_:
		return TriggerEvent_Type_Archived, true
	default:
		return "", false
	}
}

type IsTriggerEventTypeWrappedType interface {
	TriggerEventTypeKey() TriggerEventTypeKey
	proto.Message
}

func (x *TriggerEventType) Set(val IsTriggerEventTypeWrappedType) {
	switch v := val.(type) {
	case *TriggerEventType_Created:
		x.Type = &TriggerEventType_Created_{Created: v}
	case *TriggerEventType_Updated:
		x.Type = &TriggerEventType_Updated_{Updated: v}
	case *TriggerEventType_Paused:
		x.Type = &TriggerEventType_Paused_{Paused: v}
	case *TriggerEventType_Activated:
		x.Type = &TriggerEventType_Activated_{Activated: v}
	case *TriggerEventType_ManuallyTriggered:
		x.Type = &TriggerEventType_ManuallyTriggered_{ManuallyTriggered: v}
	case *TriggerEventType_Triggered:
		x.Type = &TriggerEventType_Triggered_{Triggered: v}
	case *TriggerEventType_Archived:
		x.Type = &TriggerEventType_Archived_{Archived: v}
	}
}
func (x *TriggerEventType) Get() IsTriggerEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *TriggerEventType_Created_:
		return v.Created
	case *TriggerEventType_Updated_:
		return v.Updated
	case *TriggerEventType_Paused_:
		return v.Paused
	case *TriggerEventType_Activated_:
		return v.Activated
	case *TriggerEventType_ManuallyTriggered_:
		return v.ManuallyTriggered
	case *TriggerEventType_Triggered_:
		return v.Triggered
	case *TriggerEventType_Archived_:
		return v.Archived
	default:
		return nil
	}
}
func (x *TriggerEventType_Created) TriggerEventTypeKey() TriggerEventTypeKey {
	return TriggerEvent_Type_Created
}
func (x *TriggerEventType_Updated) TriggerEventTypeKey() TriggerEventTypeKey {
	return TriggerEvent_Type_Updated
}
func (x *TriggerEventType_Paused) TriggerEventTypeKey() TriggerEventTypeKey {
	return TriggerEvent_Type_Paused
}
func (x *TriggerEventType_Activated) TriggerEventTypeKey() TriggerEventTypeKey {
	return TriggerEvent_Type_Activated
}
func (x *TriggerEventType_ManuallyTriggered) TriggerEventTypeKey() TriggerEventTypeKey {
	return TriggerEvent_Type_ManuallyTriggered
}
func (x *TriggerEventType_Triggered) TriggerEventTypeKey() TriggerEventTypeKey {
	return TriggerEvent_Type_Triggered
}
func (x *TriggerEventType_Archived) TriggerEventTypeKey() TriggerEventTypeKey {
	return TriggerEvent_Type_Archived
}
func (msg *TriggerEventType) Clone() any {
	return proto.Clone(msg).(*TriggerEventType)
}

type IsTriggerEventType_Type = isTriggerEventType_Type

func (msg *TriggerEventType) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerEventType_Created) Clone() any {
	return proto.Clone(msg).(*TriggerEventType_Created)
}
func (msg *TriggerEventType_Created) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerEventType_Created) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *TriggerEventType_Updated) Clone() any {
	return proto.Clone(msg).(*TriggerEventType_Updated)
}
func (msg *TriggerEventType_Updated) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerEventType_Updated) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *TriggerEventType_Paused) Clone() any {
	return proto.Clone(msg).(*TriggerEventType_Paused)
}
func (msg *TriggerEventType_Paused) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerEventType_Paused) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *TriggerEventType_Activated) Clone() any {
	return proto.Clone(msg).(*TriggerEventType_Activated)
}
func (msg *TriggerEventType_Activated) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerEventType_Activated) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *TriggerEventType_ManuallyTriggered) Clone() any {
	return proto.Clone(msg).(*TriggerEventType_ManuallyTriggered)
}
func (msg *TriggerEventType_ManuallyTriggered) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerEventType_ManuallyTriggered) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *TriggerEventType_Triggered) Clone() any {
	return proto.Clone(msg).(*TriggerEventType_Triggered)
}
func (msg *TriggerEventType_Triggered) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerEventType_Triggered) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *TriggerEventType_Archived) Clone() any {
	return proto.Clone(msg).(*TriggerEventType_Archived)
}
func (msg *TriggerEventType_Archived) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerEventType_Archived) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *TriggerEvent) Clone() any {
	return proto.Clone(msg).(*TriggerEvent)
}
func (msg *TriggerEvent) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *TriggerEvent) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// ActionType is a oneof wrapper
type ActionTypeKey string

const (
	Action_Type_Create  ActionTypeKey = "create"
	Action_Type_Update  ActionTypeKey = "update"
	Action_Type_Archive ActionTypeKey = "archive"
)

func (x *ActionType) TypeKey() (ActionTypeKey, bool) {
	switch x.Type.(type) {
	case *ActionType_Create_:
		return Action_Type_Create, true
	case *ActionType_Update_:
		return Action_Type_Update, true
	case *ActionType_Archive_:
		return Action_Type_Archive, true
	default:
		return "", false
	}
}

type IsActionTypeWrappedType interface {
	ActionTypeKey() ActionTypeKey
	proto.Message
}

func (x *ActionType) Set(val IsActionTypeWrappedType) {
	switch v := val.(type) {
	case *ActionType_Create:
		x.Type = &ActionType_Create_{Create: v}
	case *ActionType_Update:
		x.Type = &ActionType_Update_{Update: v}
	case *ActionType_Archive:
		x.Type = &ActionType_Archive_{Archive: v}
	}
}
func (x *ActionType) Get() IsActionTypeWrappedType {
	switch v := x.Type.(type) {
	case *ActionType_Create_:
		return v.Create
	case *ActionType_Update_:
		return v.Update
	case *ActionType_Archive_:
		return v.Archive
	default:
		return nil
	}
}
func (x *ActionType_Create) ActionTypeKey() ActionTypeKey {
	return Action_Type_Create
}
func (x *ActionType_Update) ActionTypeKey() ActionTypeKey {
	return Action_Type_Update
}
func (x *ActionType_Archive) ActionTypeKey() ActionTypeKey {
	return Action_Type_Archive
}
func (msg *ActionType) Clone() any {
	return proto.Clone(msg).(*ActionType)
}

type IsActionType_Type = isActionType_Type

func (msg *ActionType) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ActionType_Create) Clone() any {
	return proto.Clone(msg).(*ActionType_Create)
}
func (msg *ActionType_Create) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ActionType_Create) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ActionType_Update) Clone() any {
	return proto.Clone(msg).(*ActionType_Update)
}
func (msg *ActionType_Update) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ActionType_Update) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ActionType_Archive) Clone() any {
	return proto.Clone(msg).(*ActionType_Archive)
}
func (msg *ActionType_Archive) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ActionType_Archive) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// TriggerStatus
const (
	TriggerStatus_UNSPECIFIED TriggerStatus = 0
	TriggerStatus_ACTIVE      TriggerStatus = 1
	TriggerStatus_PAUSED      TriggerStatus = 2
	TriggerStatus_ARCHIVED    TriggerStatus = 3
)

var (
	TriggerStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
		2: "PAUSED",
		3: "ARCHIVED",
	}
	TriggerStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
		"PAUSED":      2,
		"ARCHIVED":    3,
	}
	TriggerStatus_value_either = map[string]int32{
		"UNSPECIFIED":                0,
		"TRIGGER_STATUS_UNSPECIFIED": 0,
		"ACTIVE":                     1,
		"TRIGGER_STATUS_ACTIVE":      1,
		"PAUSED":                     2,
		"TRIGGER_STATUS_PAUSED":      2,
		"ARCHIVED":                   3,
		"TRIGGER_STATUS_ARCHIVED":    3,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x TriggerStatus) ShortString() string {
	return TriggerStatus_name_short[int32(x)]
}
func (x TriggerStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *TriggerStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := TriggerStatus_value_either[strVal]
	*x = TriggerStatus(val)
	return nil
}
