// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package trigger_pb

import (
	context "context"
	fmt "fmt"
	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM TriggerPSM

type TriggerPSM = psm.StateMachine[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
]

type TriggerPSMDB = psm.DBStateMachine[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
]

type TriggerPSMEventSpec = psm.EventSpec[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
]

type TriggerPSMEventKey = string

const (
	TriggerPSMEventNil               TriggerPSMEventKey = "<nil>"
	TriggerPSMEventCreated           TriggerPSMEventKey = "created"
	TriggerPSMEventUpdated           TriggerPSMEventKey = "updated"
	TriggerPSMEventPaused            TriggerPSMEventKey = "paused"
	TriggerPSMEventActivated         TriggerPSMEventKey = "activated"
	TriggerPSMEventManuallyTriggered TriggerPSMEventKey = "manually_triggered"
	TriggerPSMEventTriggered         TriggerPSMEventKey = "triggered"
	TriggerPSMEventArchived          TriggerPSMEventKey = "archived"
)

// EXTEND TriggerKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *TriggerKeys) PSMFullName() string {
	return "o5.trigger.v1.trigger"
}
func (msg *TriggerKeys) PSMKeyValues() (map[string]string, error) {
	keyset := map[string]string{
		"trigger_id": msg.TriggerId,
	}
	return keyset, nil
}

// EXTEND TriggerState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerState) PSMIsSet() bool {
	return msg != nil
}

func (msg *TriggerState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *TriggerState) PSMKeys() *TriggerKeys {
	return msg.Keys
}

func (msg *TriggerState) SetStatus(status TriggerStatus) {
	msg.Status = status
}

func (msg *TriggerState) SetPSMKeys(inner *TriggerKeys) {
	msg.Keys = inner
}

func (msg *TriggerState) PSMData() *TriggerData {
	if msg.Data == nil {
		msg.Data = &TriggerData{}
	}
	return msg.Data
}

// EXTEND TriggerData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND TriggerEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *TriggerEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *TriggerEvent) PSMKeys() *TriggerKeys {
	return msg.Keys
}

func (msg *TriggerEvent) SetPSMKeys(inner *TriggerKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the TriggerPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *TriggerEvent) PSMEventKey() TriggerPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return TriggerPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *TriggerEvent) UnwrapPSMEvent() TriggerPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *TriggerEventType_Created_:
		return v.Created
	case *TriggerEventType_Updated_:
		return v.Updated
	case *TriggerEventType_Paused_:
		return v.Paused
	case *TriggerEventType_Activated_:
		return v.Activated
	case *TriggerEventType_ManuallyTriggered_:
		return v.ManuallyTriggered
	case *TriggerEventType_Triggered_:
		return v.Triggered
	case *TriggerEventType_Archived_:
		return v.Archived
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *TriggerEvent) SetPSMEvent(inner TriggerPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &TriggerEventType{}
	}
	switch v := inner.(type) {
	case *TriggerEventType_Created:
		msg.Event.Type = &TriggerEventType_Created_{Created: v}
	case *TriggerEventType_Updated:
		msg.Event.Type = &TriggerEventType_Updated_{Updated: v}
	case *TriggerEventType_Paused:
		msg.Event.Type = &TriggerEventType_Paused_{Paused: v}
	case *TriggerEventType_Activated:
		msg.Event.Type = &TriggerEventType_Activated_{Activated: v}
	case *TriggerEventType_ManuallyTriggered:
		msg.Event.Type = &TriggerEventType_ManuallyTriggered_{ManuallyTriggered: v}
	case *TriggerEventType_Triggered:
		msg.Event.Type = &TriggerEventType_Triggered_{Triggered: v}
	case *TriggerEventType_Archived:
		msg.Event.Type = &TriggerEventType_Archived_{Archived: v}
	default:
		return fmt.Errorf("invalid type %T for TriggerEventType", v)
	}
	return nil
}

type TriggerPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() TriggerPSMEventKey
}

// EXTEND TriggerEventType_Created with the TriggerPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerEventType_Created) PSMIsSet() bool {
	return msg != nil
}

func (*TriggerEventType_Created) PSMEventKey() TriggerPSMEventKey {
	return TriggerPSMEventCreated
}

// EXTEND TriggerEventType_Updated with the TriggerPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerEventType_Updated) PSMIsSet() bool {
	return msg != nil
}

func (*TriggerEventType_Updated) PSMEventKey() TriggerPSMEventKey {
	return TriggerPSMEventUpdated
}

// EXTEND TriggerEventType_Paused with the TriggerPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerEventType_Paused) PSMIsSet() bool {
	return msg != nil
}

func (*TriggerEventType_Paused) PSMEventKey() TriggerPSMEventKey {
	return TriggerPSMEventPaused
}

// EXTEND TriggerEventType_Activated with the TriggerPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerEventType_Activated) PSMIsSet() bool {
	return msg != nil
}

func (*TriggerEventType_Activated) PSMEventKey() TriggerPSMEventKey {
	return TriggerPSMEventActivated
}

// EXTEND TriggerEventType_ManuallyTriggered with the TriggerPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerEventType_ManuallyTriggered) PSMIsSet() bool {
	return msg != nil
}

func (*TriggerEventType_ManuallyTriggered) PSMEventKey() TriggerPSMEventKey {
	return TriggerPSMEventManuallyTriggered
}

// EXTEND TriggerEventType_Triggered with the TriggerPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerEventType_Triggered) PSMIsSet() bool {
	return msg != nil
}

func (*TriggerEventType_Triggered) PSMEventKey() TriggerPSMEventKey {
	return TriggerPSMEventTriggered
}

// EXTEND TriggerEventType_Archived with the TriggerPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TriggerEventType_Archived) PSMIsSet() bool {
	return msg != nil
}

func (*TriggerEventType_Archived) PSMEventKey() TriggerPSMEventKey {
	return TriggerPSMEventArchived
}

func TriggerPSMBuilder() *psm.StateMachineConfig[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*TriggerKeys,    // implements psm.IKeyset
		*TriggerState,   // implements psm.IState
		TriggerStatus,   // implements psm.IStatusEnum
		*TriggerData,    // implements psm.IStateData
		*TriggerEvent,   // implements psm.IEvent
		TriggerPSMEvent, // implements psm.IInnerEvent
	]{}
}

func TriggerPSMMutation[SE TriggerPSMEvent](cb func(*TriggerData, SE) error) psm.TransitionMutation[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
	SE,              // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*TriggerKeys,    // implements psm.IKeyset
		*TriggerState,   // implements psm.IState
		TriggerStatus,   // implements psm.IStatusEnum
		*TriggerData,    // implements psm.IStateData
		*TriggerEvent,   // implements psm.IEvent
		TriggerPSMEvent, // implements psm.IInnerEvent
		SE,              // Specific event type for the transition
	](cb)
}

type TriggerPSMHookBaton = psm.HookBaton[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
]

func TriggerPSMLogicHook[SE TriggerPSMEvent](cb func(context.Context, TriggerPSMHookBaton, *TriggerState, SE) error) psm.TransitionLogicHook[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
	SE,              // Specific event type for the transition
] {
	return psm.TransitionLogicHook[
		*TriggerKeys,    // implements psm.IKeyset
		*TriggerState,   // implements psm.IState
		TriggerStatus,   // implements psm.IStatusEnum
		*TriggerData,    // implements psm.IStateData
		*TriggerEvent,   // implements psm.IEvent
		TriggerPSMEvent, // implements psm.IInnerEvent
		SE,              // Specific event type for the transition
	](cb)
}
func TriggerPSMDataHook[SE TriggerPSMEvent](cb func(context.Context, sqrlx.Transaction, *TriggerState, SE) error) psm.TransitionDataHook[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
	SE,              // Specific event type for the transition
] {
	return psm.TransitionDataHook[
		*TriggerKeys,    // implements psm.IKeyset
		*TriggerState,   // implements psm.IState
		TriggerStatus,   // implements psm.IStatusEnum
		*TriggerData,    // implements psm.IStateData
		*TriggerEvent,   // implements psm.IEvent
		TriggerPSMEvent, // implements psm.IInnerEvent
		SE,              // Specific event type for the transition
	](cb)
}
func TriggerPSMLinkHook[SE TriggerPSMEvent, DK psm.IKeyset, DIE psm.IInnerEvent](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(context.Context, *TriggerState, SE, func(DK, DIE)) error,
) psm.LinkHook[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
	SE,              // Specific event type for the transition
	DK,              // Destination Keys
	DIE,             // Destination Inner Event
] {
	return psm.LinkHook[
		*TriggerKeys,    // implements psm.IKeyset
		*TriggerState,   // implements psm.IState
		TriggerStatus,   // implements psm.IStatusEnum
		*TriggerData,    // implements psm.IStateData
		*TriggerEvent,   // implements psm.IEvent
		TriggerPSMEvent, // implements psm.IInnerEvent
		SE,              // Specific event type for the transition
		DK,              // Destination Keys
		DIE,             // Destination Inner Event
	]{
		Derive:      cb,
		Destination: linkDestination,
	}
}
func TriggerPSMGeneralLogicHook(cb func(context.Context, TriggerPSMHookBaton, *TriggerState, *TriggerEvent) error) psm.GeneralLogicHook[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralLogicHook[
		*TriggerKeys,    // implements psm.IKeyset
		*TriggerState,   // implements psm.IState
		TriggerStatus,   // implements psm.IStatusEnum
		*TriggerData,    // implements psm.IStateData
		*TriggerEvent,   // implements psm.IEvent
		TriggerPSMEvent, // implements psm.IInnerEvent
	](cb)
}
func TriggerPSMGeneralStateDataHook(cb func(context.Context, sqrlx.Transaction, *TriggerState) error) psm.GeneralStateDataHook[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralStateDataHook[
		*TriggerKeys,    // implements psm.IKeyset
		*TriggerState,   // implements psm.IState
		TriggerStatus,   // implements psm.IStatusEnum
		*TriggerData,    // implements psm.IStateData
		*TriggerEvent,   // implements psm.IEvent
		TriggerPSMEvent, // implements psm.IInnerEvent
	](cb)
}
func TriggerPSMGeneralEventDataHook(cb func(context.Context, sqrlx.Transaction, *TriggerState, *TriggerEvent) error) psm.GeneralEventDataHook[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventDataHook[
		*TriggerKeys,    // implements psm.IKeyset
		*TriggerState,   // implements psm.IState
		TriggerStatus,   // implements psm.IStatusEnum
		*TriggerData,    // implements psm.IStateData
		*TriggerEvent,   // implements psm.IEvent
		TriggerPSMEvent, // implements psm.IInnerEvent
	](cb)
}
func TriggerPSMEventPublishHook(cb func(context.Context, psm.Publisher, *TriggerState, *TriggerEvent) error) psm.EventPublishHook[
	*TriggerKeys,    // implements psm.IKeyset
	*TriggerState,   // implements psm.IState
	TriggerStatus,   // implements psm.IStatusEnum
	*TriggerData,    // implements psm.IStateData
	*TriggerEvent,   // implements psm.IEvent
	TriggerPSMEvent, // implements psm.IInnerEvent
] {
	return psm.EventPublishHook[
		*TriggerKeys,    // implements psm.IKeyset
		*TriggerState,   // implements psm.IState
		TriggerStatus,   // implements psm.IStatusEnum
		*TriggerData,    // implements psm.IStateData
		*TriggerEvent,   // implements psm.IEvent
		TriggerPSMEvent, // implements psm.IInnerEvent
	](cb)
}
func TriggerPSMUpsertPublishHook(cb func(context.Context, psm.Publisher, *TriggerState) error) psm.UpsertPublishHook[
	*TriggerKeys,  // implements psm.IKeyset
	*TriggerState, // implements psm.IState
	TriggerStatus, // implements psm.IStatusEnum
	*TriggerData,  // implements psm.IStateData
] {
	return psm.UpsertPublishHook[
		*TriggerKeys,  // implements psm.IKeyset
		*TriggerState, // implements psm.IState
		TriggerStatus, // implements psm.IStatusEnum
		*TriggerData,  // implements psm.IStateData
	](cb)
}

func (event *TriggerEvent) EventPublishMetadata() *psm_j5pb.EventPublishMetadata {
	tenantKeys := make([]*psm_j5pb.EventTenant, 0)
	return &psm_j5pb.EventPublishMetadata{
		EventId:   event.Metadata.EventId,
		Sequence:  event.Metadata.Sequence,
		Timestamp: event.Metadata.Timestamp,
		Cause:     event.Metadata.Cause,
		Auth: &psm_j5pb.PublishAuth{
			TenantKeys: tenantKeys,
		},
	}
}
