// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: o5/trigger/v1/topic/trigger.p.j5s.proto

package trigger_tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TriggerPublishTopic_TriggerEvent_FullMethodName = "/o5.trigger.v1.topic.TriggerPublishTopic/TriggerEvent"
)

// TriggerPublishTopicClient is the client API for TriggerPublishTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerPublishTopicClient interface {
	TriggerEvent(ctx context.Context, in *TriggerEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type triggerPublishTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerPublishTopicClient(cc grpc.ClientConnInterface) TriggerPublishTopicClient {
	return &triggerPublishTopicClient{cc}
}

func (c *triggerPublishTopicClient) TriggerEvent(ctx context.Context, in *TriggerEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TriggerPublishTopic_TriggerEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerPublishTopicServer is the server API for TriggerPublishTopic service.
// All implementations must embed UnimplementedTriggerPublishTopicServer
// for forward compatibility
type TriggerPublishTopicServer interface {
	TriggerEvent(context.Context, *TriggerEventMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTriggerPublishTopicServer()
}

// UnimplementedTriggerPublishTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerPublishTopicServer struct {
}

func (UnimplementedTriggerPublishTopicServer) TriggerEvent(context.Context, *TriggerEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerEvent not implemented")
}
func (UnimplementedTriggerPublishTopicServer) mustEmbedUnimplementedTriggerPublishTopicServer() {}

// UnsafeTriggerPublishTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerPublishTopicServer will
// result in compilation errors.
type UnsafeTriggerPublishTopicServer interface {
	mustEmbedUnimplementedTriggerPublishTopicServer()
}

func RegisterTriggerPublishTopicServer(s grpc.ServiceRegistrar, srv TriggerPublishTopicServer) {
	s.RegisterService(&TriggerPublishTopic_ServiceDesc, srv)
}

func _TriggerPublishTopic_TriggerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerPublishTopicServer).TriggerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerPublishTopic_TriggerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerPublishTopicServer).TriggerEvent(ctx, req.(*TriggerEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerPublishTopic_ServiceDesc is the grpc.ServiceDesc for TriggerPublishTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerPublishTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.trigger.v1.topic.TriggerPublishTopic",
	HandlerType: (*TriggerPublishTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerEvent",
			Handler:    _TriggerPublishTopic_TriggerEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/trigger/v1/topic/trigger.p.j5s.proto",
}

const (
	TriggerManageRequestTopic_TriggerManageRequest_FullMethodName = "/o5.trigger.v1.topic.TriggerManageRequestTopic/TriggerManageRequest"
)

// TriggerManageRequestTopicClient is the client API for TriggerManageRequestTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerManageRequestTopicClient interface {
	TriggerManageRequest(ctx context.Context, in *TriggerManageRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type triggerManageRequestTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerManageRequestTopicClient(cc grpc.ClientConnInterface) TriggerManageRequestTopicClient {
	return &triggerManageRequestTopicClient{cc}
}

func (c *triggerManageRequestTopicClient) TriggerManageRequest(ctx context.Context, in *TriggerManageRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TriggerManageRequestTopic_TriggerManageRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerManageRequestTopicServer is the server API for TriggerManageRequestTopic service.
// All implementations must embed UnimplementedTriggerManageRequestTopicServer
// for forward compatibility
type TriggerManageRequestTopicServer interface {
	TriggerManageRequest(context.Context, *TriggerManageRequestMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTriggerManageRequestTopicServer()
}

// UnimplementedTriggerManageRequestTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerManageRequestTopicServer struct {
}

func (UnimplementedTriggerManageRequestTopicServer) TriggerManageRequest(context.Context, *TriggerManageRequestMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerManageRequest not implemented")
}
func (UnimplementedTriggerManageRequestTopicServer) mustEmbedUnimplementedTriggerManageRequestTopicServer() {
}

// UnsafeTriggerManageRequestTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerManageRequestTopicServer will
// result in compilation errors.
type UnsafeTriggerManageRequestTopicServer interface {
	mustEmbedUnimplementedTriggerManageRequestTopicServer()
}

func RegisterTriggerManageRequestTopicServer(s grpc.ServiceRegistrar, srv TriggerManageRequestTopicServer) {
	s.RegisterService(&TriggerManageRequestTopic_ServiceDesc, srv)
}

func _TriggerManageRequestTopic_TriggerManageRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerManageRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerManageRequestTopicServer).TriggerManageRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerManageRequestTopic_TriggerManageRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerManageRequestTopicServer).TriggerManageRequest(ctx, req.(*TriggerManageRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerManageRequestTopic_ServiceDesc is the grpc.ServiceDesc for TriggerManageRequestTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerManageRequestTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.trigger.v1.topic.TriggerManageRequestTopic",
	HandlerType: (*TriggerManageRequestTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerManageRequest",
			Handler:    _TriggerManageRequestTopic_TriggerManageRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/trigger/v1/topic/trigger.p.j5s.proto",
}

const (
	TriggerManageReplyTopic_TriggerManageReply_FullMethodName = "/o5.trigger.v1.topic.TriggerManageReplyTopic/TriggerManageReply"
)

// TriggerManageReplyTopicClient is the client API for TriggerManageReplyTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerManageReplyTopicClient interface {
	TriggerManageReply(ctx context.Context, in *TriggerManageReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type triggerManageReplyTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerManageReplyTopicClient(cc grpc.ClientConnInterface) TriggerManageReplyTopicClient {
	return &triggerManageReplyTopicClient{cc}
}

func (c *triggerManageReplyTopicClient) TriggerManageReply(ctx context.Context, in *TriggerManageReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TriggerManageReplyTopic_TriggerManageReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerManageReplyTopicServer is the server API for TriggerManageReplyTopic service.
// All implementations must embed UnimplementedTriggerManageReplyTopicServer
// for forward compatibility
type TriggerManageReplyTopicServer interface {
	TriggerManageReply(context.Context, *TriggerManageReplyMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTriggerManageReplyTopicServer()
}

// UnimplementedTriggerManageReplyTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerManageReplyTopicServer struct {
}

func (UnimplementedTriggerManageReplyTopicServer) TriggerManageReply(context.Context, *TriggerManageReplyMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerManageReply not implemented")
}
func (UnimplementedTriggerManageReplyTopicServer) mustEmbedUnimplementedTriggerManageReplyTopicServer() {
}

// UnsafeTriggerManageReplyTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerManageReplyTopicServer will
// result in compilation errors.
type UnsafeTriggerManageReplyTopicServer interface {
	mustEmbedUnimplementedTriggerManageReplyTopicServer()
}

func RegisterTriggerManageReplyTopicServer(s grpc.ServiceRegistrar, srv TriggerManageReplyTopicServer) {
	s.RegisterService(&TriggerManageReplyTopic_ServiceDesc, srv)
}

func _TriggerManageReplyTopic_TriggerManageReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerManageReplyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerManageReplyTopicServer).TriggerManageReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerManageReplyTopic_TriggerManageReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerManageReplyTopicServer).TriggerManageReply(ctx, req.(*TriggerManageReplyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerManageReplyTopic_ServiceDesc is the grpc.ServiceDesc for TriggerManageReplyTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerManageReplyTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.trigger.v1.topic.TriggerManageReplyTopic",
	HandlerType: (*TriggerManageReplyTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerManageReply",
			Handler:    _TriggerManageReplyTopic_TriggerManageReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/trigger/v1/topic/trigger.p.j5s.proto",
}

const (
	TriggerRequestTopic_TriggerRequest_FullMethodName = "/o5.trigger.v1.topic.TriggerRequestTopic/TriggerRequest"
)

// TriggerRequestTopicClient is the client API for TriggerRequestTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerRequestTopicClient interface {
	TriggerRequest(ctx context.Context, in *TriggerRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type triggerRequestTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerRequestTopicClient(cc grpc.ClientConnInterface) TriggerRequestTopicClient {
	return &triggerRequestTopicClient{cc}
}

func (c *triggerRequestTopicClient) TriggerRequest(ctx context.Context, in *TriggerRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TriggerRequestTopic_TriggerRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerRequestTopicServer is the server API for TriggerRequestTopic service.
// All implementations must embed UnimplementedTriggerRequestTopicServer
// for forward compatibility
type TriggerRequestTopicServer interface {
	TriggerRequest(context.Context, *TriggerRequestMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTriggerRequestTopicServer()
}

// UnimplementedTriggerRequestTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerRequestTopicServer struct {
}

func (UnimplementedTriggerRequestTopicServer) TriggerRequest(context.Context, *TriggerRequestMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRequest not implemented")
}
func (UnimplementedTriggerRequestTopicServer) mustEmbedUnimplementedTriggerRequestTopicServer() {}

// UnsafeTriggerRequestTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerRequestTopicServer will
// result in compilation errors.
type UnsafeTriggerRequestTopicServer interface {
	mustEmbedUnimplementedTriggerRequestTopicServer()
}

func RegisterTriggerRequestTopicServer(s grpc.ServiceRegistrar, srv TriggerRequestTopicServer) {
	s.RegisterService(&TriggerRequestTopic_ServiceDesc, srv)
}

func _TriggerRequestTopic_TriggerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRequestTopicServer).TriggerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRequestTopic_TriggerRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRequestTopicServer).TriggerRequest(ctx, req.(*TriggerRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerRequestTopic_ServiceDesc is the grpc.ServiceDesc for TriggerRequestTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerRequestTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.trigger.v1.topic.TriggerRequestTopic",
	HandlerType: (*TriggerRequestTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerRequest",
			Handler:    _TriggerRequestTopic_TriggerRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/trigger/v1/topic/trigger.p.j5s.proto",
}

const (
	TriggerReplyTopic_TriggerReply_FullMethodName = "/o5.trigger.v1.topic.TriggerReplyTopic/TriggerReply"
)

// TriggerReplyTopicClient is the client API for TriggerReplyTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerReplyTopicClient interface {
	TriggerReply(ctx context.Context, in *TriggerReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type triggerReplyTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerReplyTopicClient(cc grpc.ClientConnInterface) TriggerReplyTopicClient {
	return &triggerReplyTopicClient{cc}
}

func (c *triggerReplyTopicClient) TriggerReply(ctx context.Context, in *TriggerReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TriggerReplyTopic_TriggerReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerReplyTopicServer is the server API for TriggerReplyTopic service.
// All implementations must embed UnimplementedTriggerReplyTopicServer
// for forward compatibility
type TriggerReplyTopicServer interface {
	TriggerReply(context.Context, *TriggerReplyMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTriggerReplyTopicServer()
}

// UnimplementedTriggerReplyTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerReplyTopicServer struct {
}

func (UnimplementedTriggerReplyTopicServer) TriggerReply(context.Context, *TriggerReplyMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerReply not implemented")
}
func (UnimplementedTriggerReplyTopicServer) mustEmbedUnimplementedTriggerReplyTopicServer() {}

// UnsafeTriggerReplyTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerReplyTopicServer will
// result in compilation errors.
type UnsafeTriggerReplyTopicServer interface {
	mustEmbedUnimplementedTriggerReplyTopicServer()
}

func RegisterTriggerReplyTopicServer(s grpc.ServiceRegistrar, srv TriggerReplyTopicServer) {
	s.RegisterService(&TriggerReplyTopic_ServiceDesc, srv)
}

func _TriggerReplyTopic_TriggerReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerReplyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerReplyTopicServer).TriggerReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerReplyTopic_TriggerReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerReplyTopicServer).TriggerReply(ctx, req.(*TriggerReplyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerReplyTopic_ServiceDesc is the grpc.ServiceDesc for TriggerReplyTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerReplyTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.trigger.v1.topic.TriggerReplyTopic",
	HandlerType: (*TriggerReplyTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerReply",
			Handler:    _TriggerReplyTopic_TriggerReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/trigger/v1/topic/trigger.p.j5s.proto",
}
