// Generated by j5build v0.0.0-20250407052915-b2fc017d8ac2. DO NOT EDIT

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: o5/trigger/v1/topic/trigger.p.j5s.proto

package trigger_tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TriggerPublishTopic_TriggerEvent_FullMethodName = "/o5.trigger.v1.topic.TriggerPublishTopic/TriggerEvent"
)

// TriggerPublishTopicClient is the client API for TriggerPublishTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerPublishTopicClient interface {
	TriggerEvent(ctx context.Context, in *TriggerEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type triggerPublishTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerPublishTopicClient(cc grpc.ClientConnInterface) TriggerPublishTopicClient {
	return &triggerPublishTopicClient{cc}
}

func (c *triggerPublishTopicClient) TriggerEvent(ctx context.Context, in *TriggerEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TriggerPublishTopic_TriggerEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerPublishTopicServer is the server API for TriggerPublishTopic service.
// All implementations must embed UnimplementedTriggerPublishTopicServer
// for forward compatibility
type TriggerPublishTopicServer interface {
	TriggerEvent(context.Context, *TriggerEventMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTriggerPublishTopicServer()
}

// UnimplementedTriggerPublishTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerPublishTopicServer struct {
}

func (UnimplementedTriggerPublishTopicServer) TriggerEvent(context.Context, *TriggerEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerEvent not implemented")
}
func (UnimplementedTriggerPublishTopicServer) mustEmbedUnimplementedTriggerPublishTopicServer() {}

// UnsafeTriggerPublishTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerPublishTopicServer will
// result in compilation errors.
type UnsafeTriggerPublishTopicServer interface {
	mustEmbedUnimplementedTriggerPublishTopicServer()
}

func RegisterTriggerPublishTopicServer(s grpc.ServiceRegistrar, srv TriggerPublishTopicServer) {
	s.RegisterService(&TriggerPublishTopic_ServiceDesc, srv)
}

func _TriggerPublishTopic_TriggerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerPublishTopicServer).TriggerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerPublishTopic_TriggerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerPublishTopicServer).TriggerEvent(ctx, req.(*TriggerEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerPublishTopic_ServiceDesc is the grpc.ServiceDesc for TriggerPublishTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerPublishTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.trigger.v1.topic.TriggerPublishTopic",
	HandlerType: (*TriggerPublishTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerEvent",
			Handler:    _TriggerPublishTopic_TriggerEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/trigger/v1/topic/trigger.p.j5s.proto",
}

const (
	TickRequestTopic_TickRequest_FullMethodName = "/o5.trigger.v1.topic.TickRequestTopic/TickRequest"
)

// TickRequestTopicClient is the client API for TickRequestTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickRequestTopicClient interface {
	TickRequest(ctx context.Context, in *TickRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tickRequestTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTickRequestTopicClient(cc grpc.ClientConnInterface) TickRequestTopicClient {
	return &tickRequestTopicClient{cc}
}

func (c *tickRequestTopicClient) TickRequest(ctx context.Context, in *TickRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TickRequestTopic_TickRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickRequestTopicServer is the server API for TickRequestTopic service.
// All implementations must embed UnimplementedTickRequestTopicServer
// for forward compatibility
type TickRequestTopicServer interface {
	TickRequest(context.Context, *TickRequestMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTickRequestTopicServer()
}

// UnimplementedTickRequestTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTickRequestTopicServer struct {
}

func (UnimplementedTickRequestTopicServer) TickRequest(context.Context, *TickRequestMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickRequest not implemented")
}
func (UnimplementedTickRequestTopicServer) mustEmbedUnimplementedTickRequestTopicServer() {}

// UnsafeTickRequestTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickRequestTopicServer will
// result in compilation errors.
type UnsafeTickRequestTopicServer interface {
	mustEmbedUnimplementedTickRequestTopicServer()
}

func RegisterTickRequestTopicServer(s grpc.ServiceRegistrar, srv TickRequestTopicServer) {
	s.RegisterService(&TickRequestTopic_ServiceDesc, srv)
}

func _TickRequestTopic_TickRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickRequestTopicServer).TickRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickRequestTopic_TickRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickRequestTopicServer).TickRequest(ctx, req.(*TickRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TickRequestTopic_ServiceDesc is the grpc.ServiceDesc for TickRequestTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickRequestTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.trigger.v1.topic.TickRequestTopic",
	HandlerType: (*TickRequestTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TickRequest",
			Handler:    _TickRequestTopic_TickRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/trigger/v1/topic/trigger.p.j5s.proto",
}

const (
	TickReplyTopic_TickReply_FullMethodName = "/o5.trigger.v1.topic.TickReplyTopic/TickReply"
)

// TickReplyTopicClient is the client API for TickReplyTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickReplyTopicClient interface {
	TickReply(ctx context.Context, in *TickReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tickReplyTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTickReplyTopicClient(cc grpc.ClientConnInterface) TickReplyTopicClient {
	return &tickReplyTopicClient{cc}
}

func (c *tickReplyTopicClient) TickReply(ctx context.Context, in *TickReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TickReplyTopic_TickReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickReplyTopicServer is the server API for TickReplyTopic service.
// All implementations must embed UnimplementedTickReplyTopicServer
// for forward compatibility
type TickReplyTopicServer interface {
	TickReply(context.Context, *TickReplyMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTickReplyTopicServer()
}

// UnimplementedTickReplyTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTickReplyTopicServer struct {
}

func (UnimplementedTickReplyTopicServer) TickReply(context.Context, *TickReplyMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickReply not implemented")
}
func (UnimplementedTickReplyTopicServer) mustEmbedUnimplementedTickReplyTopicServer() {}

// UnsafeTickReplyTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickReplyTopicServer will
// result in compilation errors.
type UnsafeTickReplyTopicServer interface {
	mustEmbedUnimplementedTickReplyTopicServer()
}

func RegisterTickReplyTopicServer(s grpc.ServiceRegistrar, srv TickReplyTopicServer) {
	s.RegisterService(&TickReplyTopic_ServiceDesc, srv)
}

func _TickReplyTopic_TickReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickReplyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickReplyTopicServer).TickReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickReplyTopic_TickReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickReplyTopicServer).TickReply(ctx, req.(*TickReplyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TickReplyTopic_ServiceDesc is the grpc.ServiceDesc for TickReplyTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickReplyTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.trigger.v1.topic.TickReplyTopic",
	HandlerType: (*TickReplyTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TickReply",
			Handler:    _TickReplyTopic_TickReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/trigger/v1/topic/trigger.p.j5s.proto",
}
