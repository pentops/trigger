// Code generated by protoc-gen-go-o5-messaging. DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: o5/trigger/v1/topic/trigger.p.j5s.proto

package trigger_tpb

import (
	context "context"
	messaging_j5pb "github.com/pentops/j5/gen/j5/messaging/v1/messaging_j5pb"
	messaging_pb "github.com/pentops/o5-messaging/gen/o5/messaging/v1/messaging_pb"
	o5msg "github.com/pentops/o5-messaging/o5msg"
)

// Service: TriggerPublishTopic
// Method: TriggerEvent

func (msg *TriggerEventMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.trigger.v1.topic.TriggerPublishTopic",
		GrpcMethod:       "TriggerEvent",
		Headers:          map[string]string{},
		DestinationTopic: "trigger_publish",
	}
	header.Extension = &messaging_pb.Message_Event_{
		Event: &messaging_pb.Message_Event{
			EntityName: "o5.trigger.v1.Trigger",
		},
	}
	return header
}

type TriggerPublishTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewTriggerPublishTopicTxSender[C any](sender o5msg.TxSender[C]) *TriggerPublishTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.trigger.v1.topic.TriggerPublishTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TriggerEvent",
				Message: (*TriggerEventMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TriggerPublishTopicTxSender[C]{sender: sender}
}

type TriggerPublishTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewTriggerPublishTopicCollector[C any](collector o5msg.Collector[C]) *TriggerPublishTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.trigger.v1.topic.TriggerPublishTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TriggerEvent",
				Message: (*TriggerEventMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TriggerPublishTopicCollector[C]{collector: collector}
}

type TriggerPublishTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewTriggerPublishTopicPublisher(publisher o5msg.Publisher) *TriggerPublishTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "o5.trigger.v1.topic.TriggerPublishTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TriggerEvent",
				Message: (*TriggerEventMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TriggerPublishTopicPublisher{publisher: publisher}
}

// Method: TriggerEvent

func (send TriggerPublishTopicTxSender[C]) TriggerEvent(ctx context.Context, sendContext C, msg *TriggerEventMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect TriggerPublishTopicCollector[C]) TriggerEvent(sendContext C, msg *TriggerEventMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish TriggerPublishTopicPublisher) TriggerEvent(ctx context.Context, msg *TriggerEventMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Service: TriggerManageRequestTopic
// Expose Request Metadata
func (msg *TriggerManageRequestMessage) SetJ5RequestMetadata(md *messaging_j5pb.RequestMetadata) {
	msg.Request = md
}
func (msg *TriggerManageRequestMessage) GetJ5RequestMetadata() *messaging_j5pb.RequestMetadata {
	return msg.Request
}

// Method: TriggerManageRequest

func (msg *TriggerManageRequestMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.trigger.v1.topic.TriggerManageRequestTopic",
		GrpcMethod:       "TriggerManageRequest",
		Headers:          map[string]string{},
		DestinationTopic: "trigger_manage",
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Request_{
			Request: &messaging_pb.Message_Request{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	} else {
		header.Extension = &messaging_pb.Message_Request_{
			Request: &messaging_pb.Message_Request{
				ReplyTo: "",
			},
		}
	}
	return header
}

type TriggerManageRequestTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewTriggerManageRequestTopicTxSender[C any](sender o5msg.TxSender[C]) *TriggerManageRequestTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.trigger.v1.topic.TriggerManageRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TriggerManageRequest",
				Message: (*TriggerManageRequestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TriggerManageRequestTopicTxSender[C]{sender: sender}
}

type TriggerManageRequestTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewTriggerManageRequestTopicCollector[C any](collector o5msg.Collector[C]) *TriggerManageRequestTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.trigger.v1.topic.TriggerManageRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TriggerManageRequest",
				Message: (*TriggerManageRequestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TriggerManageRequestTopicCollector[C]{collector: collector}
}

type TriggerManageRequestTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewTriggerManageRequestTopicPublisher(publisher o5msg.Publisher) *TriggerManageRequestTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "o5.trigger.v1.topic.TriggerManageRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TriggerManageRequest",
				Message: (*TriggerManageRequestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TriggerManageRequestTopicPublisher{publisher: publisher}
}

// Method: TriggerManageRequest

func (send TriggerManageRequestTopicTxSender[C]) TriggerManageRequest(ctx context.Context, sendContext C, msg *TriggerManageRequestMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect TriggerManageRequestTopicCollector[C]) TriggerManageRequest(sendContext C, msg *TriggerManageRequestMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish TriggerManageRequestTopicPublisher) TriggerManageRequest(ctx context.Context, msg *TriggerManageRequestMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Service: TriggerManageReplyTopic
// Expose Request Metadata
func (msg *TriggerManageReplyMessage) SetJ5RequestMetadata(md *messaging_j5pb.RequestMetadata) {
	msg.Request = md
}
func (msg *TriggerManageReplyMessage) GetJ5RequestMetadata() *messaging_j5pb.RequestMetadata {
	return msg.Request
}

// Method: TriggerManageReply

func (msg *TriggerManageReplyMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.trigger.v1.topic.TriggerManageReplyTopic",
		GrpcMethod:       "TriggerManageReply",
		Headers:          map[string]string{},
		DestinationTopic: "trigger_manage",
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Reply_{
			Reply: &messaging_pb.Message_Reply{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	}
	return header
}

type TriggerManageReplyTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewTriggerManageReplyTopicTxSender[C any](sender o5msg.TxSender[C]) *TriggerManageReplyTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.trigger.v1.topic.TriggerManageReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TriggerManageReply",
				Message: (*TriggerManageReplyMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TriggerManageReplyTopicTxSender[C]{sender: sender}
}

type TriggerManageReplyTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewTriggerManageReplyTopicCollector[C any](collector o5msg.Collector[C]) *TriggerManageReplyTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.trigger.v1.topic.TriggerManageReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TriggerManageReply",
				Message: (*TriggerManageReplyMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TriggerManageReplyTopicCollector[C]{collector: collector}
}

type TriggerManageReplyTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewTriggerManageReplyTopicPublisher(publisher o5msg.Publisher) *TriggerManageReplyTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "o5.trigger.v1.topic.TriggerManageReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TriggerManageReply",
				Message: (*TriggerManageReplyMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TriggerManageReplyTopicPublisher{publisher: publisher}
}

// Method: TriggerManageReply

func (send TriggerManageReplyTopicTxSender[C]) TriggerManageReply(ctx context.Context, sendContext C, msg *TriggerManageReplyMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect TriggerManageReplyTopicCollector[C]) TriggerManageReply(sendContext C, msg *TriggerManageReplyMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish TriggerManageReplyTopicPublisher) TriggerManageReply(ctx context.Context, msg *TriggerManageReplyMessage) error {
	return publish.publisher.Publish(ctx, msg)
}
